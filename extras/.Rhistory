35, 45, 55, 65, 40, 50, 60, 70,
50, 60, 70, 80, 55, 65, 75, 85,
40, 50, 60, 70, 45, 55, 65, 75,
60, 70, 80, 90, 65, 75, 85, 95,
45, 55, 65, 75, 50, 60, 70, 80,
70, 80, 90, 100, 75, 85, 95, 105,
50, 60, 70, 80, 55, 65, 75, 85,
75, 85, 95, 105, 80, 90, 100, 110,
55, 65, 75, 85, 60, 70, 80, 90,
80, 90, 100, 110, 85, 95, 105, 115,
60, 70, 80, 90, 65, 75, 85, 95,
90, 100, 110, 120, 95, 105, 115, 125))
# Define colors for each category
colors <- c("#a6cee3", "#b2df8a", "#fb9a99", "#fdbf6f")
# Create the plot
ggplot(df, aes(x = Runoff, y = Country, fill = Category)) +
geom_bar(stat = "identity", position = "stack", alpha = 0.5) +
facet_wrap(~ Scenario, ncol = 2, scales = "free_y") +
scale_fill_manual(values = colors) +
labs(x = "Yield (ton)", y = NULL) +
theme_dark() +
theme(plot.background = element_rect(fill = "black", color = NA),
panel.background = element_rect(fill = "black", color = NA),
legend.position = "top",
legend.title = element_blank(),
legend.background = element_rect(fill = "transparent"),
legend.key = element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_text(color = "white"),
axis.ticks.y = element_blank(),
strip.background = element_rect(fill = "black"),
strip.text = element_text(color = "white"),
legend.text = element_text(color = "white"))
# Save the plot as a PNG file with a black background
ggsave("stacked_bar_chart.png", dpi = 300, width = 6, height = 4, units = "in", bg = "black")
# Bar chart
library(ggplot2)
# Create sample data
# Create sample data
df <- data.frame(Country = rep(c("USA", "China", "India", "Canada", "Mexico", "Brazil", "Australia", "Russia", "Japan", "France"), each = 8),
Scenario = rep(rep(c("Scenario X", "Scenario Y"), each = 4), 10),
Category = rep(c("Category 1", "Category 2", "Category 3", "Category 4"), 20),
Runoff = c(10, 20, 30, 40, 15, 25, 35, 45,
20, 30, 40, 50, 25, 35, 45, 55,
30, 40, 50, 60, 35, 45, 55, 65,
40, 50, 60, 70, 45, 55, 65, 75,
25, 35, 45, 55, 30, 40, 50, 60,
35, 45, 55, 65, 40, 50, 60, 70,
30, 40, 50, 60, 35, 45, 55, 65,
45, 55, 65, 75, 50, 60, 70, 80,
35, 45, 55, 65, 40, 50, 60, 70,
50, 60, 70, 80, 55, 65, 75, 85,
40, 50, 60, 70, 45, 55, 65, 75,
60, 70, 80, 90, 65, 75, 85, 95,
45, 55, 65, 75, 50, 60, 70, 80,
70, 80, 90, 100, 75, 85, 95, 105,
50, 60, 70, 80, 55, 65, 75, 85,
75, 85, 95, 105, 80, 90, 100, 110,
55, 65, 75, 85, 60, 70, 80, 90,
80, 90, 100, 110, 85, 95, 105, 115,
60, 70, 80, 90, 65, 75, 85, 95,
90, 100, 110, 120, 95, 105, 115, 125))
# Define colors for each category
colors <- c("#a6cee3", "#b2df8a", "#fb9a99", "#fdbf6f")
# Create the plot
ggplot(df, aes(x = Runoff, y = Country, fill = Category)) +
geom_bar(stat = "identity", position = "stack", alpha = 0.5) +
facet_wrap(~ Scenario, ncol = 2, scales = "free_y") +
scale_fill_manual(values = colors) +
labs(x = "Yield (ton)", y = NULL) +
theme_dark() +
theme(plot.background = element_rect(fill = "black", color = NA),
panel.background = element_rect(fill = "black", color = NA),
legend.position = "top",
legend.title = element_blank(),
legend.background = element_rect(fill = "transparent"),
legend.key = element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_text(color = "white"),
axis.ticks.y = element_blank(),
strip.background = element_rect(fill = "black"),
strip.text = element_text(color = "white"),
legend.text = element_text(color = "white"))
# Save the plot as a PNG file with a black background
ggsave("stacked_bar_chart.png", dpi = 300, width = 6, height = 4, units = "in", bg = "black")
# Load the circlize package
library(circlize)
# Create dummy data for the chord diagram
data <- matrix(c(10, 5, 3, 7, 6, 4), nrow = 2, dimnames = list(c("Group 1", "Group 2"), c("Category 1", "Category 2", "Category 3")))
# Set the color for the chords and the labels
chord_color <- "black"
label_color <- "black"
# Create the chord diagram
circos.clear()
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initialize(factors = c(rownames(data), colnames(data)), xlim = c(0, 1))
# Add the links between the groups and categories
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
circos.link(rownames(data)[i], i - 1, (j - 1) / ncol(data), (j / ncol(data)),
col = chord_color, lwd = data[i, j], border = NA)
}
}
# Create dummy data for the chord diagram
data <- matrix(c(10, 5, 3, 7, 6, 4), nrow = 2, dimnames = list(c("Group 1", "Group 2"), c("Category 1", "Category 2", "Category 3")))
# Set the color for the chords and the labels
chord_color <- "black"
label_color <- "black"
# Create the chord diagram
circos.clear()
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initialize(factors = c("Group 1", "Group 2"), xlim = c(0, 1))
# Add the links between the groups and categories
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
circos.link(rownames(data)[i], i - 1, (j - 1) / ncol(data), (j / ncol(data)),
col = chord_color, lwd = data[i, j], border = NA)
}
}
set.seed(999)
mat = matrix(sample(18, 18), 3, 6)
rownames(mat) = paste0("S", 1:3)
colnames(mat) = paste0("E", 1:6)
mat
df = data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
df
chordDiagram(mat)
chordDiagram(df)
chordDiagram(df)
circos.par(gap.after = c(rep(5, nrow(mat)-1), 15, rep(5, ncol(mat)-1), 15))
chordDiagram(df)
circos.par(gap.after = c(rep(5, nrow(mat)-1), 15, rep(5, ncol(mat)-1), 15))
chordDiagram(mat)
chordDiagram(mat, big.gap = 30)
circos.par(gap.after = c("S1" = 5, "S2" = 5, "S3" = 15, "E1" = 5, "E2" = 5,
"E3" = 5, "E4" = 5, "E5" = 5, "E6" = 15))
chordDiagram(mat, big.gap = 30)
circos.clear()
set.seed(999)
mat = matrix(sample(18, 18), 3, 6)
rownames(mat) = paste0("S", 1:3)
colnames(mat) = paste0("E", 1:6)
mat
df = data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
df
circos.par(gap.after = c("S1" = 5, "S2" = 5, "S3" = 15, "E1" = 5, "E2" = 5,
"E3" = 5, "E4" = 5, "E5" = 5, "E6" = 15))
chordDiagram(mat, big.gap = 30)
set.seed(999)
mat <- matrix(sample(18, 18), 3, 6)
rownames(mat) <- paste0("S", 1:3)
colnames(mat) <- paste0("E", 1:6)
circos.par(gap.after = c("S1" = 5, "S2" = 5, "S3" = 15, "E1" = 5, "E2" = 5,
"E3" = 5, "E4" = 5, "E5" = 5, "E6" = 15))
# Create a custom color palette with all black color
color.palette <- colorRamp2(c(0, 1), c("black", "black"))
# Remove labels and axis ticks
circos.clear()
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim <- get.cell.meta.data("xlim")
ylim <- get.cell.meta.data("ylim")
circos.rect(x = xlim, y = ylim, border = NA, col = color.palette(1))
})
circos.trackPlotRegion(track.index = 2, panel.fun = function(x, y) {
xlim <- get.cell.meta.data("xlim")
ylim <- get.cell.meta.data("ylim")
circos.rect(x = xlim, y = ylim, border = NA, col = color.palette(1))
})
# Set all chords to black
chordDiagram(mat, big.gap = 30, col = "black", annotationTrack = "grid", preAllocateTracks = list(grid = grid.track(col = color.palette(1))))
library(circlize)
set.seed(999)
mat <- matrix(sample(18, 18), 3, 6)
rownames(mat) <- paste0("S", 1:3)
colnames(mat) <- paste0("E", 1:6)
circos.par(gap.after = c("S1" = 5, "S2" = 5, "S3" = 15, "E1" = 5, "E2" = 5,
"E3" = 5, "E4" = 5, "E5" = 5, "E6" = 15))
circos.clear()
set.seed(999)
mat <- matrix(sample(18, 18), 3, 6)
rownames(mat) <- paste0("S", 1:3)
colnames(mat) <- paste0("E", 1:6)
circos.par(gap.after = c("S1" = 5, "S2" = 5, "S3" = 15, "E1" = 5, "E2" = 5,
"E3" = 5, "E4" = 5, "E5" = 5, "E6" = 15))
# Create a custom color palette with all black color
color.palette <- colorRamp2(c(0, 1), c("black", "black"))
# Remove labels and axis ticks
circos.clear()
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim <- get.cell.meta.data("xlim")
ylim <- get.cell.meta.data("ylim")
circos.rect(x = xlim, y = ylim, border = NA, col = color.palette(1))
})
circos.clear()
set.seed(999)
mat <- matrix(sample(18, 18), 3, 6)
rownames(mat) <- paste0("S", 1:3)
colnames(mat) <- paste0("E", 1:6)
circos.par(gap.after = c("S1" = 5, "S2" = 5, "S3" = 15, "E1" = 5, "E2" = 5,
"E3" = 5, "E4" = 5, "E5" = 5, "E6" = 15))
# Create a custom color palette with all black color
color.palette <- colorRamp2(c(0, 1), c("black", "black"))
# Remove labels and axis ticks
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim <- get.cell.meta.data("xlim")
ylim <- get.cell.meta.data("ylim")
circos.rect(x = xlim, y = ylim, border = NA, col = color.palette(1))
})
circos.clear()
set.seed(999)
mat <- matrix(sample(18, 18), 3, 6)
rownames(mat) <- paste0("S", 1:3)
colnames(mat) <- paste0("E", 1:6)
circos.par(gap.after = c("S1" = 5, "S2" = 5, "S3" = 15, "E1" = 5, "E2" = 5,
"E3" = 5, "E4" = 5, "E5" = 5, "E6" = 15))
# Create a custom color palette with all black color
color.palette <- colorRamp2(c(0, 1), c("black", "black"))
# Initialize the circular plot
circos.initialize(factors = rownames(mat), xlim = c(0, 1))
# Remove labels and axis ticks
circos.clear()
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim <- get.cell.meta.data("xlim")
ylim <- get.cell.meta.data("ylim")
circos.rect(x = xlim, y = ylim, border = NA, col = color.palette(1))
})
# Initialize the circular plot
circos.initialize(factors = rownames(mat), xlim = c(0, 1))
# Remove labels and axis ticks
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim <- get.cell.meta.data("xlim")
ylim <- get.cell.meta.data("ylim")
circos.rect(x = xlim, y = ylim, border = NA, col = color.palette(1))
})
circos.clear()
set.seed(999)
mat <- matrix(sample(18, 18), 3, 6)
rownames(mat) <- paste0("S", 1:3)
colnames(mat) <- paste0("E", 1:6)
circos.par(gap.after = c("S1" = 5, "S2" = 5, "S3" = 15, "E1" = 5, "E2" = 5,
"E3" = 5, "E4" = 5, "E5" = 5, "E6" = 15))
# Create a custom color palette with all black color
color.palette <- colorRamp2(c(0, 1), c("black", "black"))
# Initialize the circular plot
circos.initialize(factors = rownames(mat), xlim = c(0, 1))
# Remove labels and axis ticks
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim <- get.cell.meta.data("xlim")
ylim <- get.cell.meta.data("ylim")
circos.rect(x = xlim, y = ylim, border = NA, col = color.palette(1))
})
library(circlize)
set.seed(999)
mat <- matrix(sample(18, 18), 3, 6)
rownames(mat) <- paste0("S", 1:3)
colnames(mat) <- paste0("E", 1:6)
circos.par(gap.after = c("S1" = 5, "S2" = 5, "S3" = 15, "E1" = 5, "E2" = 5,
"E3" = 5, "E4" = 5, "E5" = 5, "E6" = 15))
# Create a custom color palette with all black color
color.palette <- colorRamp2(c(0, 1), c("black", "black"))
# Initialize the circular plot
circos.initialize(factors = rownames(mat), xlim = c(0, 1))
# Remove labels and axis ticks
circos.clear()
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y, xlim, ylim) {
circos.rect(x = xlim, y = ylim, border = NA, col = color.palette(1))
})
# Load the circlize package
library(circlize)
set.seed(999)
mat = matrix(sample(18, 18), 3, 6)
rownames(mat) = paste0("S", 1:3)
colnames(mat) = paste0("E", 1:6)
mat
df = data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
df
grid.col = "black"
circos.par(gap.after = c("S1" = 5, "S2" = 5, "S3" = 15, "E1" = 5, "E2" = 5,
"E3" = 5, "E4" = 5, "E5" = 5, "E6" = 15))
chordDiagram(mat, big.gap = 30,grid.col = grid.col)
chordDiagram(mat, big.gap = 30,grid.col = grid.col, transparency = 0)
chordDiagram(mat, big.gap = 30,grid.col = grid.col, transparency = 0, annotationTrack = NULL)
mat = matrix(sample(8, 8), 3, 6)
sample(8, 8)
set.seed(999)
mat = matrix(sample(9, 8), 3, 3)
rownames(mat) = paste0("S", 1:3)
colnames(mat) = paste0("E", 1:3)
mat
df = data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
df
grid.col = "black"
circos.par(gap.after = c("S1" = 5, "S2" = 5, "S3" = 15, "E1" = 5, "E2" = 5,
"E3" = 5, "E4" = 5, "E5" = 5, "E6" = 15))
chordDiagram(mat, big.gap = 30,grid.col = grid.col, transparency = 0, annotationTrack = NULL)
set.seed(999)
mat = matrix(sample(6, 8), 2, 3)
rownames(mat) = paste0("S", 1:2)
colnames(mat) = paste0("E", 1:3)
mat
mat = matrix(sample(6, 8), 2, 3)
mat = matrix(sample(10, 6), 2, 3)
rownames(mat) = paste0("S", 1:2)
colnames(mat) = paste0("E", 1:3)
mat
df = data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
df
grid.col = "black"
circos.par(gap.after = c("S1" = 5, "S2" = 5, "S3" = 15, "E1" = 5, "E2" = 5,
"E3" = 5, "E4" = 5, "E5" = 5, "E6" = 15))
chordDiagram(mat, big.gap = 30,grid.col = grid.col, transparency = 0, annotationTrack = NULL)
circos.par(gap.after = c("S1" =30, "S2" = 35, "S3" = 35, "E1" = 35, "E2" = 35,
"E3" = 35, "E4" = 5, "E5" = 5, "E6" = 15))
chordDiagram(mat, big.gap = 30,grid.col = grid.col, transparency = 0, annotationTrack = NULL)
circos.par(gap.after = c("S1" =10, "S2" = 15, "S3" = 35, "E1" = 35, "E2" = 35,
"E3" = 35, "E4" = 5, "E5" = 5, "E6" = 15))
chordDiagram(mat, big.gap = 30,grid.col = grid.col, transparency = 0, annotationTrack = NULL)
circos.par(gap.after = c("S1" =5, "S2" = 15, "S3" = 35, "E1" = 35, "E2" = 35,
"E3" = 35, "E4" = 5, "E5" = 5, "E6" = 15))
chordDiagram(mat, big.gap = 30,grid.col = grid.col, transparency = 0, annotationTrack = NULL)
circos.par(gap.after = c("S1" =5, "S2" = 15, "S3" = 35, "E1" = 25, "E2" = 25,
"E3" = 15, "E4" = 5, "E5" = 5, "E6" = 15))
chordDiagram(mat, big.gap = 30,grid.col = grid.col, transparency = 0, annotationTrack = NULL)
mat = matrix(sample(100, 6), 2, 3)
rownames(mat) = paste0("S", 1:2)
colnames(mat) = paste0("E", 1:3)
mat
df = data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
df
grid.col = "black"
circos.par(gap.after = c("S1" =5, "S2" = 15, "S3" = 35, "E1" = 25, "E2" = 25,
"E3" = 15, "E4" = 5, "E5" = 5, "E6" = 15))
chordDiagram(mat, big.gap = 30,grid.col = grid.col, transparency = 0, annotationTrack = NULL)
# Save the chord diagram as an SVG file
svg("icons/chord_diagram.svg")
circos.clear()
dev.off()
# Save the chord diagram as an SVG file
png("icons/chord_diagram.png")
# Save the chord diagram as an SVG file
png("icons/chord_diagram.png", width=200, height=200)
# Save the chord diagram as an SVG file
svg("icons/chord_diagram.svg")
# Install the circlize package if not already installed
# install.packages("circlize")
# Load the circlize package
library(circlize)
set.seed(999)
mat <- matrix(sample(100, 6), 2, 3)
rownames(mat) <- paste0("S", 1:2)
colnames(mat) <- paste0("E", 1:3)
df <- data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
grid.col <- "black"
circos.par(gap.after = c("S1" = 5, "S2" = 15, "S3" = 35, "E1" = 25, "E2" = 25,
"E3" = 15, "E4" = 5, "E5" = 5, "E6" = 15))
# Set all colors to black and remove text
chordDiagram(mat, big.gap = 30, grid.col = grid.col, transparency = 0, annotationTrack = NULL)
# Save the chord diagram as an SVG file
svg("chord_diagram.svg")
dev.off()
# Install the circlize package if not already installed
# install.packages("circlize")
# Load the circlize package
library(circlize)
set.seed(999)
mat <- matrix(sample(100, 6), 2, 3)
rownames(mat) <- paste0("S", 1:2)
colnames(mat) <- paste0("E", 1:3)
df <- data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
grid.col <- "black"
circos.par(gap.after = c("S1" = 5, "S2" = 15, "S3" = 35, "E1" = 25, "E2" = 25,
"E3" = 15, "E4" = 5, "E5" = 5, "E6" = 15))
# Set all colors to black and remove text
chordDiagram(mat, big.gap = 30, grid.col = grid.col, transparency = 0, annotationTrack = NULL)
# Save the chord diagram as an SVG file
png("icons/chord_diagram.png")
dev.off()
library(Cairo)
# Load the circlize package
library(circlize)
library(Cairo)
set.seed(999)
mat <- matrix(sample(100, 6), 2, 3)
rownames(mat) <- paste0("S", 1:2)
colnames(mat) <- paste0("E", 1:3)
df <- data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
grid.col <- "black"
circos.par(gap.after = c("S1" = 5, "S2" = 15, "S3" = 35, "E1" = 25, "E2" = 25,
"E3" = 15, "E4" = 5, "E5" = 5, "E6" = 15))
# Set all colors to black and remove text
chordDiagram(mat, big.gap = 30, grid.col = grid.col, transparency = 0, annotationTrack = NULL)
# Save the chord diagram as an SVG file
CairoPNG("icons/icon_chord.png", width = 800, height = 800, units = "px", bg = "transparent")
dev.off()
# Save the chord diagram as an SVG file
CairoPNG("icons/icon_chord.png", width = 800, height = 800, units = "px", bg = "white")
dev.off()
# Install the circlize package if not already installed
# install.packages("circlize")
# Load the circlize package
library(circlize)
library(Cairo)
set.seed(999)
mat <- matrix(sample(100, 6), 2, 3)
rownames(mat) <- paste0("S", 1:2)
colnames(mat) <- paste0("E", 1:3)
df <- data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
grid.col <- "black"
circos.par(gap.after = c("S1" = 5, "S2" = 15, "S3" = 35, "E1" = 25, "E2" = 25,
"E3" = 15, "E4" = 5, "E5" = 5, "E6" = 15))
# Set all colors to black and remove text
chordDiagram(mat, big.gap = 30, grid.col = grid.col, transparency = 0, annotationTrack = NULL)
# Save the chord diagram as an SVG file
CairoPNG("icons/icon_chord.png", width = 800, height = 800, units = "px", bg = "white")
dev.off()
png("my_plot.png")
dev.off()
# Set all colors to black and remove text
chordDiagram(mat, big.gap = 30, grid.col = grid.col, transparency = 0, annotationTrack = NULL)
png("my_plot.png")
# Load the circlize package
library(circlize)
library(Cairo)
set.seed(999)
mat <- matrix(sample(100, 6), 2, 3)
rownames(mat) <- paste0("S", 1:2)
colnames(mat) <- paste0("E", 1:3)
df <- data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
grid.col <- "black"
circos.par(gap.after = c("S1" = 5, "S2" = 15, "S3" = 35, "E1" = 25, "E2" = 25,
"E3" = 15, "E4" = 5, "E5" = 5, "E6" = 15))
# Set all colors to black and remove text
chordDiagram(mat, big.gap = 30, grid.col = grid.col, transparency = 0, annotationTrack = NULL)
# Save the chord diagram as an SVG file
CairoPNG("icons/icon_chord.png", width = 800, height = 800, units = "px", bg = "white")
dev.off()
png("my_plot.png",width = 800, height = 800, units = "px")
dev.off()
dev.off()
# Load the circlize package
library(circlize)
library(Cairo)
set.seed(999)
mat <- matrix(sample(100, 6), 2, 3)
rownames(mat) <- paste0("S", 1:2)
colnames(mat) <- paste0("E", 1:3)
df <- data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
grid.col <- "black"
circos.par(gap.after = c("S1" = 5, "S2" = 15, "S3" = 35, "E1" = 25, "E2" = 25,
"E3" = 15, "E4" = 5, "E5" = 5, "E6" = 15))
# Set all colors to black and remove text
png(file = "icons/icon_chord.png", width = 800, height = 800)
chordDiagram(mat, big.gap = 30, grid.col = grid.col, transparency = 0, annotationTrack = NULL)
dev.off()
# Load the circlize package
library(circlize)
library(Cairo)
set.seed(999)
mat <- matrix(sample(100, 6), 2, 3)
rownames(mat) <- paste0("S", 1:2)
colnames(mat) <- paste0("E", 1:3)
df <- data.frame(from = rep(rownames(mat), times = ncol(mat)),
to = rep(colnames(mat), each = nrow(mat)),
value = as.vector(mat),
stringsAsFactors = FALSE)
grid.col <- "black"
circos.par(gap.after = c("S1" = 5, "S2" = 15, "S3" = 35, "E1" = 25, "E2" = 25,
"E3" = 15, "E4" = 5, "E5" = 5, "E6" = 15))
# Set all colors to black and remove text
png(file = "icons/icon_chord.png", width = 800, height = 800, background="transparent")
# Set all colors to black and remove text
svg(file = "icons/icon_chord.svg", width = 800, height = 800, background="transparent")
# Set all colors to black and remove text
png(file = "icons/icon_chord.png", width = 800, height = 800, bg="transparent")
chordDiagram(mat, big.gap = 30, grid.col = grid.col, transparency = 0, annotationTrack = NULL)
dev.off()
