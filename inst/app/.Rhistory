long = case_when((posLongSum > negLongSum) & (long < 0) & flip ==1 ~ long+360,
(posLongSum < negLongSum) & (long > 0) & flip ==1 ~ long-360,
TRUE~long))%>%
dplyr::ungroup()
if(all(unique(a$flipType) %in% c(1,-1))){print("yes!")}
a$subRegion%>%unique()
ggplot()+ geom_polygon(data = a,
aes(x = long, y = lat, group = group, fill = value),
colour = "gray10", lwd=0.5)
# Raw Map Data
#dataMapx
#regionsx = argus::constants("US52")
regionsx = unique(mapCountriesdf$subRegion)
dataMap_raw <- tibble::tibble(
subRegion=c(regionsx,regionsx),
scenario=c(rep("scen1",length(regionsx)),(rep("scen2",length(regionsx)))),
x=c(rep(2010,length(regionsx)),rep(2010,length(regionsx))),
param=c(rep("ag",length(regionsx)),rep("ag",length(regionsx))),
value=runif(length(regionsx)*2,0,1000)); dataMap_raw
shpdf <-mapdfFind(dataMap_raw)
a <- shpdf %>%
dplyr::inner_join(dataMap_raw, by="subRegion") %>%
#dplyr::filter(subRegion!="South_Pacific_Islands")%>%
dplyr::group_by(subRegion) %>%
dplyr::mutate(minLong = min(long),
negLongSum = sum(long[which(long<=0)], na.rm=T),
maxLong = max(long),
posLongSum = sum(long[which(long>=0)], na.rm=T),
flip = case_when(minLong<-160 & maxLong>160 ~ 1,
TRUE~0),
flipType = case_when((posLongSum > negLongSum) & (long < 0) & flip ==1 ~ 1,
(posLongSum < negLongSum) & (long > 0) & flip ==1 ~ -1,
TRUE ~ 0),
long = case_when((posLongSum > negLongSum) & (long < 0) & flip ==1 ~ long+360,
(posLongSum < negLongSum) & (long > 0) & flip ==1 ~ long-360,
TRUE~long))%>%
dplyr::ungroup()
if(all(unique(a$flipType) %in% c(1,-1))){print("yes!")}
a$subRegion%>%unique()
ggplot()+ geom_polygon(data = a,
aes(x = long, y = lat, group = group, fill = value),
colour = "gray10", lwd=0.5)
a%>%as.data.frame()%>%filter(subRegion=="USA")
# Raw Map Data
#dataMapx
#regionsx = argus::constants("US52")
regionsx = unique(mapCountriesdf$subRegion)
dataMap_raw <- tibble::tibble(
subRegion=c(regionsx,regionsx),
scenario=c(rep("scen1",length(regionsx)),(rep("scen2",length(regionsx)))),
x=c(rep(2010,length(regionsx)),rep(2010,length(regionsx))),
param=c(rep("ag",length(regionsx)),rep("ag",length(regionsx))),
value=runif(length(regionsx)*2,0,1000)); dataMap_raw
shpdf <-mapdfFind(dataMap_raw)
a <- shpdf %>%
dplyr::inner_join(dataMap_raw, by="subRegion") %>%
#dplyr::filter(subRegion!="South_Pacific_Islands")%>%
dplyr::group_by(subRegion) %>%
dplyr::mutate(minLong = min(long),
negLongSum = sum(long[which(long<=0)], na.rm=T),
maxLong = max(long),
posLongSum = sum(long[which(long>=0)], na.rm=T),
flip = case_when(minLong<-160 & maxLong>160 ~ 1,
TRUE~0),
flipType = case_when((abs(posLongSum) > abs(negLongSum)) & (long < 0) & flip ==1 ~ 1,
(abs(posLongSum) < abs(negLongSum)) & (long > 0) & flip ==1 ~ -1,
TRUE ~ 0),
long = case_when((abs(posLongSum) > abs(negLongSum)) & (long < 0) & flip ==1 ~ long+360,
(abs(posLongSum) < abs(negLongSum)) & (long > 0) & flip ==1 ~ long-360,
TRUE~long))%>%
dplyr::ungroup()
if(all(unique(a$flipType) %in% c(1,-1))){print("yes!")}
a%>%as.data.frame()%>%filter(subRegion=="USA")
ggplot()+ geom_polygon(data = a,
aes(x = long, y = lat, group = group, fill = value),
colour = "gray10", lwd=0.5)
# Raw Map Data
#dataMapx
#regionsx = argus::constants("US52")
#regionsx = unique(mapCountriesdf$subRegion)
regionsx = c("USA","China")
dataMap_raw <- tibble::tibble(
subRegion=c(regionsx,regionsx),
scenario=c(rep("scen1",length(regionsx)),(rep("scen2",length(regionsx)))),
x=c(rep(2010,length(regionsx)),rep(2010,length(regionsx))),
param=c(rep("ag",length(regionsx)),rep("ag",length(regionsx))),
value=runif(length(regionsx)*2,0,1000)); dataMap_raw
shpdf <-mapdfFind(dataMap_raw)
a <- shpdf %>%
dplyr::inner_join(dataMap_raw, by="subRegion") %>%
#dplyr::filter(subRegion!="South_Pacific_Islands")%>%
dplyr::group_by(subRegion) %>%
dplyr::mutate(minLong = min(long),
negLongSum = sum(long[which(long<=0)], na.rm=T),
maxLong = max(long),
posLongSum = sum(long[which(long>=0)], na.rm=T),
flip = case_when(minLong<-160 & maxLong>160 ~ 1,
TRUE~0),
flipType = case_when((abs(posLongSum) > abs(negLongSum)) & (long < 0) & flip ==1 ~ 1,
(abs(posLongSum) < abs(negLongSum)) & (long > 0) & flip ==1 ~ -1,
TRUE ~ 0),
long = case_when((abs(posLongSum) > abs(negLongSum)) & (long < 0) & flip ==1 ~ long+360,
(abs(posLongSum) < abs(negLongSum)) & (long > 0) & flip ==1 ~ long-360,
TRUE~long))%>%
dplyr::ungroup()
if(all(unique(a$flipType) %in% c(1,-1))){print("yes!")}
a%>%as.data.frame()%>%filter(subRegion=="USA")
ggplot()+ geom_polygon(data = a,
aes(x = long, y = lat, group = group, fill = value),
colour = "gray10", lwd=0.5)
runApp('inst/app')
runApp('inst/app')
shiny::runApp('inst/app')
shiny::runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
shiny::runApp('inst/app')
# Raw Map Data
#dataMapx
#regionsx = argus::constants("US52")
#regionsx = unique(mapCountriesdf$subRegion)
regionsx = c("USA","China")
dataMap_raw <- tibble::tibble(
subRegion=c(regionsx,regionsx),
scenario=c(rep("scen1",length(regionsx)),(rep("scen2",length(regionsx)))),
x=c(rep(2010,length(regionsx)),rep(2010,length(regionsx))),
param=c(rep("ag",length(regionsx)),rep("ag",length(regionsx))),
value=runif(length(regionsx)*2,0,1000)); dataMap_raw
tm1 <- system.time(
{
for(i in 1:10){x <-rmap::mapFind(dataMap_raw)}
})
tm2 <- system.time(
{
for(i in 1:10){x1 <-argus::mapdfFind(dataMap_raw)}
})
tm1
tm2
shiny::runApp('inst/app')
shiny::runApp('inst/app')
argus::run()
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
library(rmap)
library(broom)
library(ggplot2)
library(dplyr)
library(magrittr)
library(profvis)
library(tictoc)
library(lineprof)
# Raw Map Data
dataChartPlot <-  read.csv("C:/Z/models/argus/inst/extdata/exampleDataEU.csv",header=T)%>%
tibble::as_tibble(); dataChartPlot; dataChartPlot$param%>%unique()
dataChartPlot <- # All regions
dataMapx() %>% tidyr::complete(scenario,param,subRegion,x) %>%
dplyr::mutate(value=case_when(is.na(value)~0,
TRUE~value))%>%
dplyr::filter(subRegion %in% subsetRegionsx())
dataChartPlot %>%
tidyr::complete(scenario,param,subRegion,x)
dataChartPlot <-  read.csv("C:/Z/models/argus/inst/extdata/exampleDataEU.csv",header=T)%>%
tibble::as_tibble(); dataChartPlot; dataChartPlot$param%>%unique()
# Aggregate across classes
tblAggsums <-dataChartPlot %>%
dplyr::filter(subRegion %in% regionsSelectedx()) %>%
dplyr::mutate(scenario = as.character(scenario)) %>%
dplyr::filter(aggregate == "sum") %>%
dplyr::select(scenario, param, subRegion, x, value) %>%
dplyr::group_by_at(dplyr::vars(-value)) %>%
dplyr::summarize_at(c("value"), list( ~ sum(.)))
tblAggmeans <- data() %>%
dplyr::filter(subRegion %in% regionsSelectedx()) %>%
dplyr::select(-class) %>%
dplyr::mutate(scenario = as.character(scenario)) %>%
dplyr::filter(aggregate == "mean") %>%
dplyr::select(scenario, param, subRegion, x, value) %>%
dplyr::group_by_at(dplyr::vars(-value)) %>%
dplyr::summarize_at(c("value"), list( ~ mean(.)))
dataChartPlot <-  read.csv("C:/Z/models/argus/inst/extdata/exampleDataEU.csv",header=T)%>%
tibble::as_tibble(); dataChartPlot; dataChartPlot$param%>%unique()
# Aggregate across classes
tblAggsums <-dataChartPlot %>%
#dplyr::filter(subRegion %in% regionsSelectedx()) %>%
dplyr::mutate(scenario = as.character(scenario)) %>%
dplyr::filter(aggregate == "sum") %>%
dplyr::select(scenario, param, subRegion, x, value) %>%
dplyr::group_by_at(dplyr::vars(-value)) %>%
dplyr::summarize_at(c("value"), list( ~ sum(.)))
tblAggmeans <- data() %>%
#dplyr::filter(subRegion %in% regionsSelectedx()) %>%
dplyr::select(-class) %>%
dplyr::mutate(scenario = as.character(scenario)) %>%
dplyr::filter(aggregate == "mean") %>%
dplyr::select(scenario, param, subRegion, x, value) %>%
dplyr::group_by_at(dplyr::vars(-value)) %>%
dplyr::summarize_at(c("value"), list( ~ mean(.)))
dataChartPlot <-  read.csv("C:/Z/models/argus/inst/extdata/exampleDataEU.csv",header=T)%>%
tibble::as_tibble(); dataChartPlot; dataChartPlot$param%>%unique()
# Aggregate across classes
tblAggsums <-dataChartPlot %>%
#dplyr::filter(subRegion %in% regionsSelectedx()) %>%
dplyr::mutate(scenario = as.character(scenario)) %>%
dplyr::filter(aggregate == "sum") %>%
dplyr::select(scenario, param, subRegion, x, value) %>%
dplyr::group_by_at(dplyr::vars(-value)) %>%
dplyr::summarize_at(c("value"), list( ~ sum(.)))
tblAggmeans <- dataChartPlot %>%
#dplyr::filter(subRegion %in% regionsSelectedx()) %>%
dplyr::select(-class) %>%
dplyr::mutate(scenario = as.character(scenario)) %>%
dplyr::filter(aggregate == "mean") %>%
dplyr::select(scenario, param, subRegion, x, value) %>%
dplyr::group_by_at(dplyr::vars(-value)) %>%
dplyr::summarize_at(c("value"), list( ~ mean(.)))
dataMapx <- dplyr::bind_rows(tblAggsums, tblAggmeans) %>% dplyr::ungroup()
dataMapx <- dataMapx %>%
tidyr::complete(scenario,param,subRegion,x) %>%
dplyr::mutate(value=case_when(is.na(value)~0,
TRUE~value))%>%
dplyr::filter(subRegion %in% subsetRegionsx())
dataMapx <- dataMapx %>%
tidyr::complete(scenario,param,subRegion,x) %>%
dplyr::mutate(value=case_when(is.na(value)~0,
TRUE~value))
dataChartPlot <-  read.csv("C:/Z/models/argus/inst/extdata/exampleDataEU.csv",header=T)%>%
tibble::as_tibble(); dataChartPlot; dataChartPlot$param%>%unique()
# Aggregate across classes
tblAggsums <-dataChartPlot %>%
#dplyr::filter(subRegion %in% regionsSelectedx()) %>%
dplyr::mutate(scenario = as.character(scenario)) %>%
dplyr::filter(aggregate == "sum") %>%
dplyr::select(scenario, param, subRegion, x, value) %>%
dplyr::group_by_at(dplyr::vars(-value)) %>%
dplyr::summarize_at(c("value"), list( ~ sum(.)))
tblAggmeans <- dataChartPlot %>%
#dplyr::filter(subRegion %in% regionsSelectedx()) %>%
dplyr::select(-class) %>%
dplyr::mutate(scenario = as.character(scenario)) %>%
dplyr::filter(aggregate == "mean") %>%
dplyr::select(scenario, param, subRegion, x, value) %>%
dplyr::group_by_at(dplyr::vars(-value)) %>%
dplyr::summarize_at(c("value"), list( ~ mean(.)))
dataMapx <- dplyr::bind_rows(tblAggsums, tblAggmeans) %>% dplyr::ungroup()
dataMapx <- dataMapx %>%
tidyr::complete(scenario,param,subRegion,x) %>%
dplyr::mutate(value=case_when(is.na(value)~0,
TRUE~value)); dataMapx
dataChartPlot <-  read.csv("C:/Z/models/argus/inst/extdata/exampleDataEU.csv",header=T)%>%
tibble::as_tibble(); dataChartPlot; dataChartPlot$param%>%unique()
# Aggregate across classes
tblAggsums <-dataChartPlot %>%
#dplyr::filter(subRegion %in% regionsSelectedx()) %>%
dplyr::mutate(scenario = as.character(scenario)) %>%
dplyr::filter(aggregate == "sum") %>%
dplyr::select(scenario, param, subRegion, x, value) %>%
dplyr::group_by_at(dplyr::vars(-value)) %>%
dplyr::summarize_at(c("value"), list( ~ sum(.)))
tblAggmeans <- dataChartPlot %>%
#dplyr::filter(subRegion %in% regionsSelectedx()) %>%
dplyr::select(-class) %>%
dplyr::mutate(scenario = as.character(scenario)) %>%
dplyr::filter(aggregate == "mean") %>%
dplyr::select(scenario, param, subRegion, x, value) %>%
dplyr::group_by_at(dplyr::vars(-value)) %>%
dplyr::summarize_at(c("value"), list( ~ mean(.)))
dataMapx <- dplyr::bind_rows(tblAggsums, tblAggmeans) %>% dplyr::ungroup(); dataMapx
dataMapx %>%
tidyr::complete(scenario,param,subRegion,x)
dataMapx
dataMapx%>%as.data.frame()
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
shiny::runApp('inst/app')
shiny::runApp('inst/app')
shiny::runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
# Raw Map Data
#dataMapx
#regionsx = argus::constants("US52")
#regionsx = unique(mapCountriesdf$subRegion)
regionsx = c("USA","China")
dataMap_raw <- tibble::tibble(
subRegion=c(regionsx,regionsx),
scenario=c(rep("scen1",length(regionsx)),(rep("scen2",length(regionsx)))),
x=c(rep(2010,length(regionsx)),rep(2010,length(regionsx))),
param=c(rep("ag",length(regionsx)),rep("ag",length(regionsx))),
value=runif(length(regionsx)*2,0,1000)); dataMap_raw
# Raw Map Data
#dataMapx
#regionsx = argus::constants("US52")
#regionsx = unique(mapCountriesdf$subRegion)
regionsx = c("USA","China")
dataMap_raw <- tibble::tibble(
subRegion=c(regionsx,regionsx),
scenario=c(rep("scen1",length(regionsx)),(rep("scen2",length(regionsx)))),
x=c(rep(2010,length(regionsx)),rep(2010,length(regionsx))),
param=c(rep("ag",length(regionsx)),rep("ag",length(regionsx))),
value=runif(length(regionsx)*2,0,1000)); dataMap_raw
scenRef_i = unique(dataMap_raw$scenario)[1]
scenRef_i = unique(dataMap_raw$scenario)[1]
scenRef_i = unique(dataMap_raw$scenario)[1]; scenRef_i
# Calculate Diff Values
tbl_pd <-dataMap_raw %>%
dplyr::filter(scenario == scenRef_i)
tbl_pd
unique(dataMap_raw$scenario)[unique(dataMap_raw$scenario) !=
scenRef_i]
k="scen2"
tbl_temp <- dataMap_raw %>%
dplyr::filter(scenario %in% c(scenRef_i, k))
# print("tbl_temp")
# print(tbl_temp)
# print("tbl_temp$value")
# print(tbl_temp$value)
tbl_temp <- tbl_temp %>%
tidyr::spread(scenario, value)
tbl_temp[is.na(tbl_temp)] <- 0
tbl_temp <- tbl_temp %>%
dplyr::mutate(!!paste(k, diffText, sep = "") := get(k) - get(scenRef_i)) %>%
dplyr::select(-dplyr::one_of(c(k, scenRef_i)))
diffText = "Abs Diff"
tbl_temp <- tbl_temp %>%
dplyr::mutate(!!paste(k, diffText, sep = "") := get(k) - get(scenRef_i)) %>%
dplyr::select(-dplyr::one_of(c(k, scenRef_i)))
# print("tbl temp post mute")
# print(tbl_temp)
tbl_temp <- tbl_temp %>%
tidyr::gather(key = scenario, value = value, -c(names(tbl_temp)[!names(tbl_temp) %in% paste(k, diffText, sep = "")]))
# print("tidyr")
# print(tbl_temp)
tbl_pd <- dplyr::bind_rows(tbl_pd, tbl_temp)
tbl_pd <- tbl_pd %>%
dplyr::mutate(scenario = factor(scenario,
levels = c(scenRef_i,
unique(
tbl_pd$scenario
)[unique(tbl_pd$scenario) != scenRef_i])))
# print(tbl_pd)
tbl_pd
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
runApp('inst/app')
shiny::runApp('inst/app')
runApp('inst/app')
shiny::runApp('inst/app')
?plot_grid
?plot_grid
runApp('inst/app')
shiny::runApp('inst/app')
shiny::runApp('inst/app')
library(argus)
shiny::runApp('inst/app')
shiny::runApp('inst/app')
runApp('inst/app')
shiny::runApp('inst/app')
shiny::runApp('inst/app')
argus::mapCountriesdf
a<-argus::mapCountriesdf
a
a%>%filter(subRegion=="Peru")
a1<-a%>%filter(subRegion=="Peru")
data.table::fwrite(a1,"peru.csv")
argus::mapGCAMBasinsdf
runApp('inst/app')
shiny::runApp('inst/app')
devtools::check()
library(argus)
?argus
?argus::summaryPlotReg
devtools::check()
library(argus)
devtools::check()
library(argus)
runApp('inst/app')
shiny::runApp('inst/app')
runApp('inst/app')
library(argus)
devtools::check()
shiny::runApp('inst/app')
deployApp(appName="argus")
library(rsconnect)
gc()
install.packages("testthat")
library)devtools)
library(devtools)
install_github("JGCRI/argus")
library(rsconnect)
deployApp(appName="argus")
setwd("./inst/app")
getwd()
deployApp(appName="argus")
library(gcamextractor)
gcamextractor::queries''
gcamextractor::queries
library(argus)
devtools::check()
library(argus)
library(argus)
library(ggplot2)
data = c(label=c("a","b","c"),x=c(1,2,3),value=c(1,2,3))
ggplot(data, aes(x=x,y=value, fill=label)) +
geom_bar(position="stack", stat="identity", col="black",lwd=0.5) +
scale_fill_manual(values=mypal)
mypal = c("a"="red","b"="blue","c"="green","d"="black")
ggplot(data, aes(x=x,y=value, fill=label)) +
geom_bar(position="stack", stat="identity", col="black",lwd=0.5) +
scale_fill_manual(values=mypal)
data = data.frame(c(label=c("a","b","c"),x=c(1,2,3),value=c(1,2,3)))
ggplot(data, aes(x=x,y=value, fill=label)) +
geom_bar(position="stack", stat="identity", col="black",lwd=0.5) +
scale_fill_manual(values=mypal)
data = data.frame(c("label"=c("a","b","c"),"x"=c(1,2,3),"value"=c(1,2,3)))
ggplot(data, aes(x=x,y=value, fill=label)) +
geom_bar(position="stack", stat="identity", col="black",lwd=0.5) +
scale_fill_manual(values=mypal)
data
data = data.frame("label"=c("a","b","c"),"x"=c(1,2,3),"value"=c(1,2,3))
ggplot(data, aes(x=x,y=value, fill=label)) +
geom_bar(position="stack", stat="identity", col="black",lwd=0.5) +
scale_fill_manual(values=mypal)
data = data.frame("label"=c("a","b","c"),"x"=c(1,2,3),"value"=c(1,2,3))
mypal = c("a"="red","b"="blue","c"="green","d"="black")
ggplot(data, aes(x=x,y=value, fill=label)) +
geom_bar(position="stack", stat="identity", col="black",lwd=0.5) +
scale_fill_manual(values=mypal)
ggplot(data, aes(x=x,y=value, fill=label)) +
geom_bar(position="stack", stat="identity", col="black",lwd=0.5) +
scale_fill_manual(values=mypal[names(mypal) %in% unique(data$label)])
ggplot(data, aes(x=x,y=value, fill=label)) +
geom_bar(position="stack", stat="identity", col="black",lwd=0.5) +
scale_fill_manual(values=mypal)
ggplot(data, aes(x=x,y=value, fill=label)) +
geom_bar(position="stack", stat="identity", col="black",lwd=0.5) +
scale_fill_manual(values=mypal[names(mypal) %in% unique(data$label)])
library(devtools)
devtools::install_github("JGCRI/jgcricolors")
devtools::install_github("JGCRI/gcamextractor")
devtools::install_github("JGCRI/argus")
getwd()
library(rsconnect)
#devtools::install_github("JGCRI/argus")
# Change working directory to where your files are
setwd("./inst/app")
deployApp(appName="argus")
install.packages("rsconnect")
library(rsconnect)
#devtools::install_github("JGCRI/argus")
# Change working directory to where your files are
setwd("./inst/app")
deployApp(appName="argus")
library(rsconnect)
rsconnect::setAccountInfo(name='jgcri',                  token='0DB50DF14B5EBC349AA3295129FB9362',                          secret='/aZf8wUYskNyMzRMQkvXuJHi08i5nIMBU8xgmzMu')
getwd()
deployApp(appName="argus")
rsconnect::setAccountInfo(name='jgcri',token='0DB50DF14B5EBC349AA3295129FB9362',secret='/aZf8wUYskNyMzRMQkvXuJHi08i5nIMBU8xgmzMu')
?deployApp
deployApp(appName="argus", account="jgcri")
library(rmap)
rmap::map(mapUS49)
dev.off()
library(gcamextractor)
gcamextractor::data_params
getwd()
library(devtools)
devtools::install_github("JGCRI/rmap")
library(devtools)
devtools::install_github("JGCRI/argus")
library(rsconnect)
#devtools::install_github("JGCRI/argus")
# Change working directory to where your files are
setwd("./inst/app")
#deployApp(appName="argus", account="jgcri")
deployApp(appName="argus", account="zarrar")
devtools::install_github("JGCRI/rpackageutils")
library(rsconnect)
#devtools::install_github("JGCRI/argus")
# Change working directory to where your files are
setwd("./inst/app")
#deployApp(appName="argus", account="jgcri")
deployApp(appName="argus", account="zarrar")
library(rsconnect)
#devtools::install_github("JGCRI/argus")
# Change working directory to where your files are
setwd("./inst/app")
#deployApp(appName="argus", account="jgcri")
deployApp(appName="argus", account="jgcri")
library(argus)
library(devtools)
devtools::check()
library(argus)
library(pkgdown)
pkgdown::deploy_to_branch(new_process=FALSE)
library(rmap)
rmap::mapIntersectGCAMBasinCountrydf
rmap::mapIntersectGCAMBasinCountrydf
rmap::map(mapIntersectGCAMBasinCountry)
library(argus)
shiny::runApp('inst/app')
